#include <stdio.h>
#include <string.h>
#include "includes.h"
#include "altera_up_avalon_character_lcd.h"
#define   TASK_STACKSIZE       2048
#define INPUT_POLLING_TASK_PRIORITY      1
#define NUMBER_OF_LASER 8
OS_STK    inputPollingTaskStack[TASK_STACKSIZE];

void inputPollingTask(void* pdata){
	alt_up_character_lcd_dev * char_lcd_dev;
	int laserStatus;
	int* laserStatusPointer =(int* )SWITCH_BASE;
	int previousLaserStatus;

	//=========== init LCD ===========
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
	if ( char_lcd_dev == NULL)
		alt_printf ("Error: could not open character LCD device\n");
	else
		alt_printf ("Opened character LCD device\n");
	alt_up_character_lcd_init (char_lcd_dev);
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
	alt_up_character_lcd_string(char_lcd_dev, "MIDIGeneratorPrototype");

	//=========== Start polling  ===========
	while (1){
		previousLaserStatus = laserStatus;
		laserStatus = *laserStatusPointer;
		if (previousLaserStatus!=laserStatus){
			printLaserStatusOnLCD(char_lcd_dev,laserStatus);	//For debugging
			handleLaserStatusChange(previousLaserStatus,laserStatus);
		}
	}
}

void handleLaserStatusChange(int previousStatus, int currentStatus){
	int i;
	unsigned noteType; //0 = off 1 = on
	//Find bits that are changed
	int differentBits = previousStatus^currentStatus;		//XOR: 100 ^ 110 = 010
	int* midiOutPointer = (int*) MIDIOUT_0_BASE;
	int midiData;

	for (i=0;i<NUMBER_OF_LASER;i++){
		if( ((1 << i) & (differentBits)) == (1 << i) ){

			noteType = ((currentStatus &  (1 << i)) ==  (1 << i)) ?  1: 0;

			midiData =  (0<<27) + (5<<21) + (1<<20) + (0<<19) + (5<<11) + (1<<10) + (0<<9) + (0<<1) +1;
			printf("Note %i\n",i);
			printf("NoteType %i\n",noteType);
			printf("MidiData %u\n",midiData);

			if(i==0){
				if (noteType==1){
					*midiOutPointer = midiData;
				}
				else{
					*midiOutPointer = 43690;
				}
			}
		}
	}
}

char * getMappedNote(int laserNumber){
	static char noteMap[8][10] = {"C","D","E","F","G","A","B","C"};
	return noteMap[laserNumber];
}

//helper for debugging
void printLaserStatusOnLCD(alt_up_character_lcd_dev * char_lcd_dev, int laserStatus){
    static char message[9];
    message[0] = '\0';
    int i;
    for (i = 128; i > 0; i >>= 1){
        strcat(message, ((laserStatus & i) == i) ? "1" : "0");
    }
	alt_up_character_lcd_init (char_lcd_dev);
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
	alt_up_character_lcd_string(char_lcd_dev,"Laser Status:");
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
	alt_up_character_lcd_string(char_lcd_dev, message);
}

int main(void){

	OSTaskCreateExt(inputPollingTask,
			NULL,
			(void *)&inputPollingTaskStack[TASK_STACKSIZE-1],
			INPUT_POLLING_TASK_PRIORITY,
			INPUT_POLLING_TASK_PRIORITY,
			inputPollingTaskStack,
			TASK_STACKSIZE,
			NULL,
			0);

	OSStart();
	return 0;
}
